name: Process
on:
  schedule:
    - cron: "10 03 * * *"    # 每天 03:10 执行
    - cron: "10 11 * * *"    # 每天 11:10 执行
  workflow_dispatch:         # 支持手动触发

concurrency:
  group: ${{ github.repository }}
  cancel-in-progress: true   # 新工作流会取消正在进行的工作流
  
env:
  # time zone
  TZ: Asia/Shanghai

  # network proxy aggregate config
  SUBSCRIBE_CONF: ${{ secrets.SUBSCRIBE_CONF }}

  # token
  PUSH_TOKEN: ${{ secrets.PUSH_TOKEN }}

  # network reachable
  REACHABLE: ${{ vars.REACHABLE }}

  # not check connective
  SKIP_ALIVE_CHECK: ${{ vars.SKIP_ALIVE_CHECK }}

  # skip remark
  SKIP_REMARK: ${{ vars.SKIP_REMARK }}

  # workflow mode
  WORKFLOW_MODE: ${{ vars.WORKFLOW_MODE }}

  # include spwcial protocols, such vless hysteria2 and hysteria
  ENABLE_SPECIAL_PROTOCOLS: ${{ vars.ENABLE_SPECIAL_PROTOCOLS }}

  # 添加新的环境变量
  SERVER_HOST: ${{ secrets.SERVER_HOST }}
  SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
  SERVER_SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}
  SERVER_PORT: ${{ secrets.SERVER_PORT }}

jobs:
  process:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Prepare
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
          architecture: "x64"
          cache: "pip"

      - name: Install
        run: pip3 install -r requirements.txt

      - name: Process Nodes
        run: |
          # 执行处理脚本
          python -u subscribe/process.py --overwrite
          
          # 调试信息
          echo "当前目录结构："
          ls -la
          echo "data 目录结构："
          ls -la data || true
          echo "根目录下的 yaml 文件："
          find . -name "*.yaml"

      - name: Deploy to Server
        run: |
          # 检查必需的环境变量
          if [ -z "$SERVER_SSH_KEY" ] || [ -z "$SERVER_HOST" ] || [ -z "$SERVER_USERNAME" ] || [ -z "$SERVER_PORT" ]; then
            echo "错误：缺少必需的服务器配置环境变量"
            exit 1
          fi

          # 准备 SSH 密钥
          echo "$SERVER_SSH_KEY" > private_key.pem
          chmod 600 private_key.pem

          # 查找 clash.yaml 文件
          CLASH_FILE=$(find . -name "clash.yaml" | head -n 1)
          
          if [ -z "$CLASH_FILE" ]; then
            echo "错误：未找到 clash.yaml 文件"
            exit 1
          else
            echo "找到配置文件：$CLASH_FILE"
          fi

          echo "开始传输文件..."
          rsync --info=progress2 -avz -e "ssh -i private_key.pem -p $SERVER_PORT -o StrictHostKeyChecking=no" \
            "$CLASH_FILE" $SERVER_USERNAME@$SERVER_HOST:/data/files/clash.yaml
          
          if [ $? -eq 0 ]; then
            echo "文件传输成功"
          else
            echo "文件传输失败"
            exit 1
          fi
           
      - name: Timestamp
        run: |
          echo "工作流完成时间："
          date "+%Y-%m-%d %H:%M:%S"
